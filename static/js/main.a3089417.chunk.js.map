{"version":3,"sources":["img/hero/bloodseeker/Bloodseeker_icon.png","enums/AbilityType.ts","enums/AllianceType.ts","pages/hero/HeroPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AbilityType","AllianceType","HeroPage","hero","className","name","src","avatar","alt","fullImage","require","alliances","BloodBound","Deadeye","abilities","Type","Active","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uNAAAA,EAAOC,QAAU,IAA0B,8C,wCCA/BC,ECAAC,E,gDCKG,SAASC,EAASC,GAChC,OACC,yBAAKC,UAAU,gCACd,8BAAOD,EAAKE,MACZ,yBAAKC,IAAKH,EAAKI,OAAQH,UAAU,cAAcI,IAAI,gBACnD,8BAAOL,EAAKM,a,SFVHT,O,mBAAAA,I,sBAAAA,M,cCAAC,O,yBAAAA,I,2BAAAA,I,mBAAAA,I,iBAAAA,I,uBAAAA,I,qBAAAA,I,iBAAAA,I,mBAAAA,I,iBAAAA,I,qBAAAA,I,oBAAAA,I,0BAAAA,I,kBAAAA,I,oBAAAA,I,oBAAAA,I,oBAAAA,I,gBAAAA,I,4BAAAA,I,oBAAAA,I,oBAAAA,I,oBAAAA,I,oBAAAA,I,wBAAAA,I,kBAAAA,I,wBAAAA,I,gBAAAA,I,wBAAAA,I,uBAAAA,M,KEOZ,IAAME,EAAa,CAClBE,KAAM,cACNE,OAAQG,EAAQ,IAChBC,UAAW,CAACV,EAAaW,WAAYX,EAAaY,SAClDC,UAAW,CACV,CACCC,KAAMf,EAAYgB,UAmBNC,MAdf,WACC,OACC,yBAAKb,UAAU,OACd,kBAAC,EAAD,CACCC,KAAMF,EAAKE,KACXE,OAAQJ,EAAKI,OACbE,UAAWN,EAAKM,UAChBE,UAAWR,EAAKQ,UAChBG,UAAWX,EAAKW,cCdAI,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DCZHC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI5C,kBAAmBC,WACtBA,UAAUC,cAAcC,MACtBC,MAAK,SAAAC,GACLA,EAAaC,gBAEbC,OAAM,SAAAC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3089417.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bloodseeker_icon.bfe1d2ff.png\";","export enum AbilityType {\r\n\tActive,\r\n\tPassive\r\n}\r\n","export enum AllianceType {\r\n\tAssassins,\r\n\tBloodBound,\r\n\tBrawny,\r\n\tBrute,\r\n\tChampion,\r\n\tDeadeye,\r\n\tDemon,\r\n\tDragon,\r\n\tDruid,\r\n\tElusive,\r\n\tHealer,\r\n\tHeartless,\r\n\tHuman,\r\n\tHunter,\r\n\tInsect,\r\n\tKnight,\r\n\tMage,\r\n\tPrimordial,\r\n\tSavage,\r\n\tScaled,\r\n\tShaman,\r\n\tSpirit,\r\n\tSummoner,\r\n\tTroll,\r\n\tVigilant,\r\n\tVoid,\r\n\tWarlocks,\r\n\tWarrior\r\n}\r\n","import React from \"react\";\r\nimport \"./HeroPage.css\";\r\n\r\nimport Hero from \"models/Hero\";\r\n\r\nexport default function HeroPage(hero: Hero): JSX.Element {\r\n\treturn (\r\n\t\t<div className=\"hero-page d-flex flex-column\">\r\n\t\t\t<span>{hero.name}</span>\r\n\t\t\t<img src={hero.avatar} className=\"hero-avatar\" alt=\"Bloodseeker\" />\r\n\t\t\t<span>{hero.fullImage}</span>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport HeroPage from \"./pages/hero/HeroPage\";\nimport Hero from \"./models/Hero\";\nimport { AbilityType } from \"./enums/AbilityType\";\nimport { AllianceType } from \"enums/AllianceType\";\n\nconst hero: Hero = {\n\tname: \"Bloodseeker\",\n\tavatar: require(\"img/hero/bloodseeker/Bloodseeker_icon.png\"),\n\talliances: [AllianceType.BloodBound, AllianceType.Deadeye],\n\tabilities: [\n\t\t{\n\t\t\tType: AbilityType.Active\n\t\t}\n\t]\n};\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<HeroPage\n\t\t\t\tname={hero.name}\n\t\t\t\tavatar={hero.avatar}\n\t\t\t\tfullImage={hero.fullImage}\n\t\t\t\talliances={hero.alliances}\n\t\t\t\tabilities={hero.abilities}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf(\"javascript\") === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}